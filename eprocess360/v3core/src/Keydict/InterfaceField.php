<?php
/**
 * Created by PhpStorm.
 * User: Kira
 * Date: 8/13/2015
 * Time: 6:07 PM
 */
namespace eprocess360\v3core\Keydict;
use eprocess360\v3core\Keydict\StorageStrategy\InterfaceStorageStrategy;


/**
 * Class Field
 * A general Keydict/Entry class that holds the functions shared between them.  The Exception functions required for
 * handling exceptions thrown by the Form, Keydict and Entry.
 * @package eprocess360\v3core\Keydict
 */
interface InterfaceField
{
    /**
     * Add an Exception to the Form's Exception list
     * @param \Exception $exception
     */
    public function addException(\Exception $exception);

    /**
     * Check to see if the Form has Exceptions after acceptPost()
     * @return bool
     * @throws \Exception
     */
    public function hasException();

    /**
     * Get the Exceptions generated by acceptPost()
     * @return \Exception[]
     * @throws \Exception
     */
    public function getException();

    /**
     * Set the name of the Field, essentially adding a namespace to all value.  Set to null to remove.
     * @param string|null $name
     * @return Field
     */
    public function setName($name);

    /**
     * Returns the active Storage Strategy
     * @return InterfaceStorageStrategy
     */
    public function getStorageStrategy();

    /**
     * Set the active StorageStrategy
     * @param InterfaceStorageStrategy $storage_strategy
     * @return $this
     */
    public function setStorageStrategy(InterfaceStorageStrategy $storage_strategy);

    /**
     * Get the label of the Field
     * @return string
     */
    public function getLabel();

    /**
     * Set the label of the Field
     * @param string $label
     * @return $this
     */
    public function setLabel($label);

    /**
     * Set a meta key/value pair on the Entry.  This is part of the runtime configuration.  Value is optional.
     * @param $key
     * @param null $value
     * @return $this
     */
    public function setMeta($key, $value = null);

    /**
     * Check to see if the Keydict meta has a particular meta key.
     * @param $key
     * @param bool|false $inverse
     * @return bool
     */
    public function hasMeta($key, $inverse = false);

    /**
     * Unset a particular meta key/value on the Keydict by specifying the key
     * @param $key
     * @return $this
     */
    public function unsetMeta($key);

    /**
     * Get a particular meta key value from the Keydict, or throw an Exception is the key does not exist.
     * @param $key
     * @return mixed
     * @throws \Exception
     */
    public function getMeta($key);

    /**
     * @return bool
     */
    public function hasParent();

    /**
     * @return InterfaceField
     */
    public function getParent();

    /**
     * @param $parent
     * @return InterfaceField
     */
    public function setParent($parent);

    /**
     * @param int $depth
     * @return null|string
     */
    public function getName($depth = 0);

    public function isContainer();

    public function acceptPost();

    public function getParents($child_parents = []);

    public function getFields();

    public function getRawName();
}