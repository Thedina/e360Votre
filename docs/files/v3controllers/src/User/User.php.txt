<?php

namespace eprocess360\v3controllers\User;


use eprocess360\v3core\Controller\Auth;
use eprocess360\v3core\Controller\Controller;
use eprocess360\v3core\Controller\Router;
use eprocess360\v3core\Form;
use eprocess360\v3core\Keydict\Entry\Password;
use eprocess360\v3core\Keydict\Table;
use eprocess360\v3core\Model\Users;
use eprocess360\v3core\User as CoreUser;
use Exception;

/**
 * Class User
 * @package eprocess360\v3controllers\User
 */
class User extends Controller
{
    use Router, Auth;


    /*********************************************   #ROUTING#  **********************************************/


    /**
     * Define the available routes for the module here. This function should not perform any other logic outside of
     * specifying available routes.
     */
    public function routes()
    {
        $this->routes->map('GET', '', function () {
            $this->userSettingsAPI();
        });

        $this->routes->map('POST', '', function () {
            $this->updateUserSettingsAPI();
        });

        $this->routes->map('GET', '/find', function () {
            $this->findUserAPI();
        });
    }

    /**
     * API Function used to search Users through a given name/email
     * /user/find?name=
     * Handler for user search (by name)
     */
    public function findUserAPI()
    {
        $found = [];
        if (isset($_GET['name'])) {
            $text = ltrim($_GET['name']);
            if (strlen($text)) {
                $found = \eprocess360\v3core\User::findUser($text);
            }
        }

        $response = $this->getResponseHandler();
        $response->setResponse(['data' => $found]);
    }

    /**
     * API Function to get the User Settings form.
     */
    public function userSettingsAPI()
    {
        $form = $this->buildForm()['form'];

        $this->standardResponse($form);
    }

    /**
     * API Function to update the User Settings Form
     * @throws \eprocess360\v3core\Keydict\Exception\KeydictException
     */
    public function updateUserSettingsAPI()
    {
        $formkeydict = $this->buildForm();

        /** @var Form $form */
        $form = $formkeydict['form'];
        $keydict = $formkeydict['keydict'];

        /** @var Table $keydict */
        $keydict->acceptPost();
        $keydict->update();
        $keydict->setSaved(true);

        try {
            $form->acceptPost();
        } catch (Exception $e) {
            var_dump($e);
        }

        $this->standardResponse($form);

    }


    /**********************************************   #HELPER#  **********************************************/


    /**
     * Helper function that sets the Response's template, data, response code, and errors.
     * @param $form
     */
    private function standardResponse($form)
    {
        $response = $this->getResponseHandler();
        $response->setTemplate('User.settings.html.twig');
        $response->setResponse(['Form' => $form]);
    }

    /**
     * Helper function to build the User Settings form
     * @return Form
     * @throws Exception
     */
    private function buildForm()
    {
        global $pool;
        $form = Form::build(0, 'userSettings', 'User Settings')->setPublic(true);

        $keydict = Users::sqlFetch($pool->User->getIdUser());
        $keydict->password->setMeta('ignore');
        $form->accepts(
            $keydict->firstName,
            $keydict->lastName,
            $keydict->email,
            $keydict->alternateEmail,
            $keydict->phone,
            $keydict->status->isAway,

            Password::build('currentPassword', 'Current Password')->setMeta('ignore'),
            Password::build('newPassword', 'New Password')->setMeta('ignore'),
            Password::build('repeatNewPassword', 'Repeat New Password')->setMeta('ignore')
        );
        $formkeydict = $form->getKeydict();
        $formkeydict->email->setMeta('oldValue', $formkeydict->email->get());

        $formkeydict->addLateValidator('emailExists', function () use ($formkeydict) {
            if ($formkeydict->getField('email')->get() != $formkeydict->email->getMeta('oldValue')) {
                if (CoreUser::emailExists($formkeydict->getField('email')->get())) {
                    throw new Exception('Email already in use');
                }
            }
        });

        return ['form' => $form, 'keydict' => $keydict];
    }

}
